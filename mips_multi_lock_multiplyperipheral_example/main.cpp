/******************************************************
 * This is the main file for the mips ArchC model     *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

const char *project_name="mips";
const char *project_file="mips.ac";
const char *archc_version="2.2";
const char *archc_options="-abi ";

#include  <iostream>
#include  <systemc.h>
#include  "ac_stats_base.H"
#include  "mips.H"

#include  "ac_tlm_mem.h"
#include  "ac_tlm_router.h"
#include  "ac_tlm_peripheral.h"

using user::ac_tlm_mem;
using user::ac_tlm_router;
using user::ac_tlm_peripheral;

int sc_main(int ac, char *av[])
{

  //!  ISA simulator
  mips mips_proc1("mips1");
  mips mips_proc2("mips2");
  mips mips_proc3("mips3");
  mips mips_proc4("mips4");
  
  ac_tlm_mem mem("mem", 100*1024*1024);
  ac_tlm_router router("router");
  ac_tlm_peripheral peripheral("peripheral"); 

  router.MEM_port(mem.target_export);
  router.PERIPHERAL_port(peripheral.target_export); 

  mips_proc1.DM_port(router.target_export);
  mips_proc2.DM_port(router.target_export);
  mips_proc3.DM_port(router.target_export);
  mips_proc4.DM_port(router.target_export);

#ifdef AC_DEBUG
  ac_trace1("mips_proc1.trace");
  ac_trace2("mips_proc2.trace");
  ac_trace3("mips_proc3.trace");
  ac_trace4("mips_proc4.trace");
#endif 

  const uint8_t n_cpus = 4;
  char ***avn = new char**[n_cpus];
  for (uint8_t c_cpu = 0; c_cpu < n_cpus; ++c_cpu) {
    avn[c_cpu] = new char*[ac];
    for (uint8_t c_arg = 0; c_arg < ac; ++c_arg) {
      avn[c_cpu][c_arg] = new char[1 + strlen(av[c_arg])];
      strncpy(avn[c_cpu][c_arg], av[c_arg], 1 + strlen(av[c_arg]));
    }
  }

  mips_proc1.init(2, avn[0]);
  mips_proc2.init(2, avn[1]);
  mips_proc3.init(2, avn[2]);
  mips_proc4.init(2, avn[3]);

  // char *av1[] = {"mips.x", "--load=./hello.x"};
  // // int ac1 = 2;
  // char *av2[] = {"mips.x", "--load=./hello.x"};
  // // int ac2 = 2;
  // char *av3[] = {"mips.x", "--load=./hello.x"};
  // char *av4[] = {"mips.x", "--load=./hello.x"};
  
  // mips_proc1.init(2, av1);
  // mips_proc2.init(2, av2);
  // mips_proc3.init(2, av3);
  // mips_proc4.init(2, av4);
  cerr << endl;

  // y4k start
  mips_proc1.set_instr_batch_size(1);
  mips_proc2.set_instr_batch_size(1);
  mips_proc3.set_instr_batch_size(1);
  mips_proc4.set_instr_batch_size(1);
  // y4k end

  sc_start();

  mips_proc1.PrintStat();
  mips_proc2.PrintStat();
  mips_proc3.PrintStat();
  mips_proc4.PrintStat();
  cerr << endl;

#ifdef AC_STATS
  ac_stats_base::print_all_stats(std::cerr);
#endif 

#ifdef AC_DEBUG
  ac_close_trace();
#endif 

  for (uint8_t c_cpu = 0; c_cpu < n_cpus; ++c_cpu) {
    for (uint8_t c_arg = 0; c_arg < ac; ++c_arg) {
      // std::cout << (int)c_cpu << ", " << (int)c_arg << ": " << avn[c_cpu][c_arg] << std::endl;
      delete[] avn[c_cpu][c_arg];
      avn[c_cpu][c_arg] = NULL;
    }
    delete[] avn[c_cpu];
    avn[c_cpu] = NULL;
  }
  delete avn;
  avn = NULL;

  //return mips_proc1.ac_exit_status + mips_proc2.ac_exit_status;
  return mips_proc1.ac_exit_status + mips_proc2.ac_exit_status + mips_proc3.ac_exit_status + mips_proc4.ac_exit_status;
}
